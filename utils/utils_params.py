import pathlib
import datetime


def gen_run_folder(mode, test_id=''):
    """
    Generate folder to save files each test
        - program_log: log information generated during the running
        - gin_operative: gin configuration file
        - report: test report generated by the program
        - saved_models: folder used to save origin model used for the test
    :param mode: running mode of the software
    :param test_id: id of test, will be used as part of folder name if set
    :return:
    """
    run_paths = dict()
    date_creation = datetime.datetime.now().strftime('%Y-%m-%d@%H-%M-%S-%f')
    if test_id:
        test_folder_root = pathlib.Path(__file__).resolve().parents[1]\
            .joinpath("test_result", date_creation+"_"+test_id)
    else:
        test_folder_root = pathlib.Path(__file__).resolve().parents[1]\
            .joinpath("test_result", date_creation)

    run_paths['root'] = test_folder_root
    run_paths['program_log'] = test_folder_root.joinpath("program_log")
    run_paths['gin_log'] = test_folder_root.joinpath("config_operative.gin")
    run_paths['report'] = test_folder_root.joinpath("report")
    run_paths['coco_dataset'] = pathlib.Path(__file__).resolve().parents[1]\
        .joinpath("data_pipeline", "coco_2017")
    if mode == "convert":
        run_paths["saved_models"] = test_folder_root.joinpath("saved_models")
        run_paths["saved_models"].mkdir(parents=True, exist_ok=True)

    # Create folders
    for k, v in run_paths.items():
        if any([x in k for x in ["root", "saved_models"]]):
            v.mkdir(parents=True, exist_ok=True)

    # Create files
    for k, v in run_paths.items():
        if any([x in k for x in ['log', 'report']]):
            v.touch(exist_ok=True)

    return run_paths


def save_config(path, configuration):
    p = pathlib.Path(path)
    p.write_text(configuration)
